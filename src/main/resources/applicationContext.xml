<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- 开启注解扫描，要扫描的是service和dao层的注解，但是要忽略web层注解，因为web层让SpringMVC框架去管理 -->
	<context:component-scan base-package="com.ssm">
		<!-- 配置要忽略的注解 -->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>

	<!--引入jdbc.properties-->
	<context:property-placeholder location="classpath:jdbc.properties"/>

	<!--配置数据源-->
		<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
			<property name="driverClassName" value="${jdbc.driver}" />
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />
		</bean>

	<!--配置sqlSession工程-->
	<bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sessionFactory">
		<!--加载数据源-->
		<property name="dataSource" ref="dataSource"/>
		<!--加载mybatis的配置文件-->
		<property name="configLocation" value="classpath:mybatis.xml"/>
		<!--加载mapper文件-->
		<property name="mapperLocations" value="classpath:mapper/*.xml"/>
	</bean>

	<!--配置扫描dao的包-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.ssm.mapper"/>
	</bean>
</beans>
<!--<?xml version="1.0" encoding="UTF-8"?>-->
<!--<beans xmlns="http://www.springframework.org/schema/beans"-->
<!--	xmlns:aop="http://www.springframework.org/schema/aop"-->
<!--	   xmlns:tx="http://www.springframework.org/schema/tx"-->
<!--	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"-->
<!--	   xmlns:context="http://www.springframework.org/schema/context"-->
<!--	xsi:schemaLocation="http://www.springframework.org/schema/beans -->
<!--	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd -->
<!--	http://www.springframework.org/schema/aop -->
<!--	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd -->
<!--	http://www.springframework.org/schema/tx  -->
<!--	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd -->
<!--	http://www.springframework.org/schema/context-->
<!--	http://www.springframework.org/schema/context/spring-context-3.0.xsd">-->
<!--    &lt;!&ndash; 通过注解生成对象 业务层对象 &ndash;&gt;-->
<!--	&lt;!&ndash;  <context:component-scan base-package="com.ssm.service"></context:component-scan>&ndash;&gt;-->


<!--	&lt;!&ndash; 数据源配置 &ndash;&gt;-->
<!--	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">-->
<!--		<property name="driverClassName" value="com.mysql.jdbc.Driver" />-->
<!--		<property name="url" value="jdbc:mysql://127.0.0.1:3306/campushelp" />-->
<!--		<property name="username" value="root" />-->
<!--		<property name="password" value="1234" />-->
<!--	</bean>-->

<!--	&lt;!&ndash; 创建SqlSessionFactory实例 &ndash;&gt;-->
<!--	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">-->
<!--		&lt;!&ndash;dataSource属性指定要用到的数据源 &ndash;&gt;-->
<!--		<property name="dataSource" ref="dataSource" />-->
<!--		&lt;!&ndash;configLocation属性指定mybatis的主配置文件 &ndash;&gt;-->
<!--		&lt;!&ndash;  <property name="configLocation" value="classpath:mybatis-config.xml" />&ndash;&gt;-->
<!--		-->
<!--		<property name="plugins">-->
<!--			<array>-->
<!--				<bean class="com.github.pagehelper.PageHelper">-->
<!--					<property name="properties">-->
<!--						<value>-->
<!--							dialect=mysql-->
<!--							reasonable=true-->
<!--						</value>-->
<!--					</property>-->
<!--				</bean>-->
<!--			</array>-->
<!--		</property>-->
<!--		-->
<!--	</bean>-->

<!--	&lt;!&ndash; 映射接口 basePackage指定要扫描的包，此包及其子包之下的映射器接口 都会被搜索到,创建Mapper对象 &ndash;&gt;-->
<!--	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">-->
<!--		<property name="basePackage" value="com.ssm.mapper"></property>-->
<!--	</bean>-->

<!--	&lt;!&ndash; 事务配置 &ndash;&gt;-->
<!--	<bean id="transactionManager"-->
<!--		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
<!--		<property name="dataSource" ref="dataSource"></property>-->
<!--	</bean>-->

<!--	&lt;!&ndash; 配置事务的传播特性 &ndash;&gt;-->
<!--	<tx:advice id="txAdvice" transaction-manager="transactionManager">-->
<!--		<tx:attributes>-->
<!--			&lt;!&ndash; 传播属性-REQUIRED支持当前事务，如果当前没有事务，就新建一个事务  &ndash;&gt;-->
<!--			<tx:method name="find*" read-only="true" />-->
<!--			<tx:method name="get*" read-only="true" />-->
<!--			<tx:method name="query*" read-only="true" />-->
<!--			<tx:method name="add*" propagation="REQUIRED" />-->
<!--			<tx:method name="update*" propagation="REQUIRED" />-->
<!--			<tx:method name="del*" propagation="REQUIRED" />-->
<!--		</tx:attributes>-->
<!--	</tx:advice>-->

<!--	&lt;!&ndash; 配置参与事务的类 &ndash;&gt;-->
<!--	<aop:config>-->
<!--		&lt;!&ndash;pointcut元素定义一个切入点，execution()是最常用的切点函数， 其中的第一个星号用以匹配方法的返回类型，这里星号表明匹配所有返回类型。 -->
<!--			com.ssm.service.*.*(..)表明匹配com.ssm.service包下的所有类的所有方法， ..代表方法参数可以是任意的，包括0个。 &ndash;&gt;-->
<!--		<aop:pointcut id="myPointcut" expression="execution(public * com.ssm.service.impl.*.*(..))"/>-->
<!--		&lt;!&ndash;将定义好的事务处理策略应用到上述的切入点 &ndash;&gt;-->
<!--		<aop:advisor advice-ref="txAdvice" pointcut-ref="myPointcut" />-->
<!--	</aop:config>-->

<!--</beans>-->